this is a problem about DFS(deep-first-search). the goal of DFS is trying any possible path to its end.

let's consider about this problem, we visit one new node, and then visit its connected node.

we push the new node into one color set, and all connected node should push into another one, and then we visit the connected nodes.

when a node is visited, the node should be tagged as visited-node, and a visited node should not be visited again.

the problem is solved as folow:

class Solution {
public:
    bool helper(vector<vector<int>>& graph , vector<int>& colors , int color , int i){
        if(graph[i].empty()) return true;
        
        for(auto node : graph[i]){
            if(colors[node] != -1){
                if(colors[node] == color) return false;
                else continue;
            }
            colors[node] = (color == 0) ? 1: 0;
            if(!helper(graph , colors , colors[node] , node)) return false;
        }
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph) {
        int size = graph.size();
        vector<int> colors(size , -1);
        
        for(int i = 0;i != size;i++){
            if(colors[i] != -1) continue;
            if(!helper(graph,colors,0,i)) return false;
        }
        return true;
    }
};
